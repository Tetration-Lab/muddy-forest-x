import _ from 'lodash'
import { PLANET_NAME_LENGTH } from '../const/planet'

export function sfc32(a, b, c, d) {
  a >>>= 0
  b >>>= 0
  c >>>= 0
  d >>>= 0
  let t = (a + b) | 0
  a = b ^ (b >>> 9)
  b = (c + (c << 3)) | 0
  c = (c << 21) | (c >>> 11)
  d = (d + 1) | 0
  t = (t + d) | 0
  c = (c + t) | 0
  return (t >>> 0) / 4294967296
}

export function randSeed(seed: bigint) {
  var seed = seed % BigInt(4294967295) ^ BigInt(0xdeadbeef) // 32-bit seed with optional XOR value
  return sfc32(0x9e3779b9, 0x243f6a88, 0xb7e15162, Number(seed))
}

export function generatePlanetName(seed: bigint) {
  let vowels = {
      '1': [
        'b',
        'c',
        'd',
        'f',
        'g',
        'h',
        'i',
        'j',
        'k',
        'l',
        'm',
        'n',
        'p',
        'q',
        'r',
        's',
        't',
        'v',
        'w',
        'x',
        'y',
        'z',
      ],
      '2': ['a', 'e', 'o', 'u'],
      '3': [
        'br',
        'cr',
        'dr',
        'fr',
        'gr',
        'pr',
        'str',
        'tr',
        'bl',
        'cl',
        'fl',
        'gl',
        'pl',
        'sl',
        'sc',
        'sk',
        'sm',
        'sn',
        'sp',
        'st',
        'sw',
        'ch',
        'sh',
        'th',
        'wh',
      ],
      '4': [
        'ae',
        'ai',
        'ao',
        'au',
        'a',
        'ay',
        'ea',
        'ei',
        'eo',
        'eu',
        'e',
        'ey',
        'ua',
        'ue',
        'ui',
        'uo',
        'u',
        'uy',
        'ia',
        'ie',
        'iu',
        'io',
        'iy',
        'oa',
        'oe',
        'ou',
        'oi',
        'o',
        'oy',
      ],
      '5': [
        'turn',
        'ter',
        'nus',
        'rus',
        'tania',
        'hiri',
        'hines',
        'gawa',
        'nides',
        'carro',
        'rilia',
        'stea',
        'lia',
        'lea',
        'ria',
        'nov',
        'phus',
        'mia',
        'nerth',
        'wei',
        'ruta',
        'tov',
        'zuno',
        'vis',
        'lara',
        'nia',
        'liv',
        'tera',
        'gantu',
        'yama',
        'tune',
        'ter',
        'nus',
        'cury',
        'bos',
        'pra',
        'thea',
        'nope',
        'tis',
        'clite',
      ],
      '6': [
        'una',
        'ion',
        'iea',
        'iri',
        'illes',
        'ides',
        'agua',
        'olla',
        'inda',
        'eshan',
        'oria',
        'ilia',
        'erth',
        'arth',
        'orth',
        'oth',
        'illon',
        'ichi',
        'ov',
        'arvis',
        'ara',
        'ars',
        'yke',
        'yria',
        'onoe',
        'ippe',
        'osie',
        'one',
        'ore',
        'ade',
        'adus',
        'urn',
        'ypso',
        'ora',
        'iuq',
        'orix',
        'apus',
        'ion',
        'eon',
        'eron',
        'ao',
        'omia',
      ],
    },
    suffix = [
      'Prime',
      '',
      '',
      'B',
      '',
      'Alpha',
      '',
      '',
      'Proxima',
      '',
      '',
      'IV',
      '',
      'V',
      '',
      'C',
      '',
      'VI',
      '',
      'VII',
      '',
      'VIII',
      '',
      'X',
      '',
      'IX',
      '',
      'D',
      '',
      '',
      '',
    ],
    mtx = [
      [1, 1, 2, 2, 5, 5],
      [2, 2, 3, 3, 6, 6],
      [3, 3, 4, 4, 5, 5],
      [4, 4, 3, 3, 6, 6],
      [3, 3, 4, 4, 2, 2, 5, 5],
      [2, 2, 1, 1, 3, 3, 6, 6],
      [3, 3, 4, 4, 2, 2, 5, 5],
      [4, 4, 3, 3, 1, 1, 6, 6],
      [3, 3, 4, 4, 1, 1, 4, 4, 5, 5],
      [4, 4, 1, 1, 4, 4, 3, 3, 6, 6],
    ],
    fn = function (i) {
      return Math.floor(randSeed(seed) * vowels[i].length)
    },
    ret = [],
    name,
    comp,
    i,
    il,
    c = 0

  for (; c < PLANET_NAME_LENGTH; c++) {
    name = ''
    comp = mtx[c % mtx.length]
    for (i = 0, il = comp.length / 2; i < il; i++) {
      name += vowels[comp[i * 2]][fn(comp[i * 2 + 1])]
    }
    ret.push(name)
  }

  ret.push(suffix[Math.floor(randSeed(seed) * suffix.length)])

  return _.startCase(ret.join(' '))
}
